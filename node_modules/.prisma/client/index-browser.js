
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.4.2
 * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
 */
Prisma.prismaVersion = {
  client: "5.4.2",
  engine: "ac9d7041ed77bcc8a8dbd2ab6616b39013829574"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.CandidatScalarFieldEnum = {
  id_candidat: 'id_candidat',
  numeroInscription: 'numeroInscription',
  nom: 'nom',
  prenoms: 'prenoms',
  date_naissance: 'date_naissance',
  sexe: 'sexe',
  isApte: 'isApte'
};

exports.Prisma.GroupeScalarFieldEnum = {
  id_groupe: 'id_groupe',
  numero: 'numero',
  date_epreuve: 'date_epreuve',
  temps: 'temps',
  heure: 'heure',
  id_examinateur: 'id_examinateur',
  terrainId: 'terrainId'
};

exports.Prisma.ExaminateurScalarFieldEnum = {
  id_examinateur: 'id_examinateur',
  nom_examinateur: 'nom_examinateur'
};

exports.Prisma.TerrainScalarFieldEnum = {
  id_terrain: 'id_terrain',
  nom_terrain: 'nom_terrain',
  id_centre: 'id_centre'
};

exports.Prisma.CentreScalarFieldEnum = {
  id_centre: 'id_centre',
  lieu: 'lieu'
};

exports.Prisma.ChoixScalarFieldEnum = {
  id_choix: 'id_choix',
  id_candidat: 'id_candidat',
  id_sport: 'id_sport'
};

exports.Prisma.SportScalarFieldEnum = {
  id_sport: 'id_sport',
  nom_sport: 'nom_sport',
  type: 'type'
};

exports.Prisma.UtilisateurScalarFieldEnum = {
  id_utilisateur: 'id_utilisateur',
  nom_complet: 'nom_complet',
  password: 'password',
  email: 'email'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.SEXE = exports.$Enums.SEXE = {
  HOMME: 'HOMME',
  FILLE: 'FILLE'
};

exports.TEMPS = exports.$Enums.TEMPS = {
  MATIN: 'MATIN',
  APRES_MIDI: 'APRES_MIDI'
};

exports.TYPE_SPORT = exports.$Enums.TYPE_SPORT = {
  INDIVIDUEL: 'INDIVIDUEL',
  COLLECTIF: 'COLLECTIF',
  COURSE_FOND: 'COURSE_FOND'
};

exports.Prisma.ModelName = {
  Candidat: 'Candidat',
  Groupe: 'Groupe',
  Examinateur: 'Examinateur',
  Terrain: 'Terrain',
  Centre: 'Centre',
  Choix: 'Choix',
  Sport: 'Sport',
  Utilisateur: 'Utilisateur'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
